from setup import SEED, GPU
from os import environ
environ['PYTHONHASHSEED']=str(SEED)
if GPU == False:
  environ["CUDA_VISIBLE_DEVICES"] = ""
from tensorflow.keras.models import Model
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense


class ExtremeAutoEncoder(Model):
  def __init__(self, samplenumber, layersizes, iteration_number = 0):
    super().__init__()
    self.encoder = Sequential([
        Dense(layersizes[0], activation="relu"),
        Dense(layersizes[1], activation="relu"),
        Dense(layersizes[2], activation="relu"),
        Dense(layersizes[3], activation="relu"),
        Dense(layersizes[4], activation="relu"),
        Dense(layersizes[5], activation="relu"),
        Dense(layersizes[6], activation="relu"),
        Dense(layersizes[7], activation="relu"),
        Dense(layersizes[8], activation="relu"),
        Dense(layersizes[9], activation="relu"),
        Dense(layersizes[10], activation="relu"),
        Dense(layersizes[11], activation="relu"),
        Dense(layersizes[12], activation="relu"),
        Dense(layersizes[13], activation="relu"),
        Dense(layersizes[14], activation="relu"),
        Dense(layersizes[15], activation="relu"),
        Dense(layersizes[16], activation="relu"),
        Dense(layersizes[17], activation="relu"),
        Dense(layersizes[18], activation="relu"),
        Dense(layersizes[19], activation="relu"),
        Dense(layersizes[20], activation="relu"),
        Dense(layersizes[21], activation="relu"),
        Dense(layersizes[22], activation="relu"),
        Dense(layersizes[23], activation="relu"),
        Dense(layersizes[24], activation="relu"),
        Dense(layersizes[25], activation="relu"),
        Dense(layersizes[26], activation="relu"),
        Dense(layersizes[27], activation="relu"),
        Dense(layersizes[28], activation="relu"),
        Dense(layersizes[29], activation="relu"),
        Dense(layersizes[30], activation="relu"),
        Dense(layersizes[31], activation="relu"),
        Dense(layersizes[32], activation="relu"),
        Dense(layersizes[33], activation="relu"),
        Dense(layersizes[34], activation="relu"),
        Dense(layersizes[35], activation="relu"),
        Dense(layersizes[36], activation="relu"),
        Dense(layersizes[37], activation="relu"),
        Dense(layersizes[38], activation="relu"),
        Dense(layersizes[39], activation="relu"),
        Dense(layersizes[40], activation="relu"),
        Dense(layersizes[41], activation="relu"),
        Dense(layersizes[42], activation="relu"),
        Dense(layersizes[43], activation="relu"),
        Dense(layersizes[44], activation="relu"),
        Dense(layersizes[45], activation="relu"),
        Dense(layersizes[46], activation="relu"),
        Dense(layersizes[47], activation="relu"),
        Dense(layersizes[48], activation="relu"),
        Dense(layersizes[49], activation="relu"),
        Dense(layersizes[50], activation="relu"),
        Dense(layersizes[51], activation="relu"),
        Dense(layersizes[52], activation="relu"),
        Dense(layersizes[53], activation="relu"),
        Dense(layersizes[54], activation="relu"),
        Dense(layersizes[55], activation="relu"),
        Dense(layersizes[56], activation="relu"),
        Dense(layersizes[57], activation="relu"),
        Dense(layersizes[58], activation="relu"),
        Dense(layersizes[59], activation="relu"),
        Dense(layersizes[60], activation="relu"),
        Dense(layersizes[61], activation="relu"),
        Dense(layersizes[62], activation="relu"),
        Dense(layersizes[63], activation="relu"),
        Dense(layersizes[64], activation="relu"),
        Dense(layersizes[65], activation="relu"),
        Dense(layersizes[66], activation="relu"),
        Dense(layersizes[67], activation="relu"),
        Dense(layersizes[68], activation="relu"),
        Dense(layersizes[69], activation="relu"),
        Dense(layersizes[70], activation="relu"),
        Dense(layersizes[71], activation="relu"),
        Dense(layersizes[72], activation="relu"),
        Dense(layersizes[73], activation="relu"),
        Dense(layersizes[74], activation="relu"),
        Dense(layersizes[75], activation="relu"),
        Dense(layersizes[76], activation="relu"),
        Dense(layersizes[77], activation="relu"),
        Dense(layersizes[78], activation="relu"),
        Dense(layersizes[79], activation="relu"),
        Dense(layersizes[80], activation="relu"),
        Dense(layersizes[81], activation="relu"),
        Dense(layersizes[82], activation="relu"),
        Dense(layersizes[83], activation="relu"),
        Dense(layersizes[84], activation="relu"),
        Dense(layersizes[85], activation="relu"),
        Dense(layersizes[86], activation="relu"),
        Dense(layersizes[87], activation="relu"),
        Dense(layersizes[88], activation="relu"),
        Dense(layersizes[89], activation="relu"),
        Dense(layersizes[90], activation="relu"),
        Dense(layersizes[91], activation="relu"),
        Dense(layersizes[92], activation="relu"),
        Dense(layersizes[93], activation="relu"),
        Dense(layersizes[94], activation="relu"),
        Dense(layersizes[95], activation="relu"),
        Dense(layersizes[96], activation="relu"),
        Dense(layersizes[97], activation="relu"),
        Dense(layersizes[98], activation="relu"),
        Dense(layersizes[99], activation="relu"),
        Dense(layersizes[100], activation="relu"),
        Dense(layersizes[101], activation="relu"),
        Dense(layersizes[102], activation="relu"),
        Dense(layersizes[103], activation="relu"),
        Dense(layersizes[104], activation="relu"),
        Dense(layersizes[105], activation="relu"),
        Dense(layersizes[106], activation="relu"),
        Dense(layersizes[107], activation="relu"),
        Dense(layersizes[108], activation="relu"),
        Dense(layersizes[109], activation="relu"),
        Dense(layersizes[110], activation="relu"),
        Dense(layersizes[111], activation="relu"),
        Dense(layersizes[112], activation="relu"),
        Dense(layersizes[113], activation="relu"),
        Dense(layersizes[114], activation="relu"),
        Dense(layersizes[115], activation="relu"),
        Dense(layersizes[116], activation="relu"),
        Dense(layersizes[117], activation="relu"),
        Dense(layersizes[118], activation="relu"),
        Dense(layersizes[119], activation="relu"),
        Dense(layersizes[120], activation="relu"),
        Dense(layersizes[121], activation="relu"),
        Dense(layersizes[122], activation="relu"),
        Dense(layersizes[123], activation="relu"),
        Dense(layersizes[124], activation="relu"),
        Dense(layersizes[125], activation="relu"),
        Dense(layersizes[126], activation="relu"),
        Dense(layersizes[127], activation="relu"),
        Dense(layersizes[128], activation="relu"),
        Dense(layersizes[129], activation="relu"),
        Dense(layersizes[130], activation="relu"),
        Dense(layersizes[131], activation="relu"),
        Dense(layersizes[132], activation="relu"),
        Dense(layersizes[133], activation="relu"),
        Dense(layersizes[134], activation="relu"),
        Dense(layersizes[135], activation="relu"),
        Dense(layersizes[136], activation="relu")],
        name= "encoder_{}".format(iteration_number))
    
    self.decoder = Sequential([
        Dense(layersizes[135], activation="relu"),
        Dense(layersizes[134], activation="relu"),
        Dense(layersizes[133], activation="relu"),
        Dense(layersizes[132], activation="relu"),
        Dense(layersizes[131], activation="relu"),
        Dense(layersizes[130], activation="relu"),
        Dense(layersizes[129], activation="relu"),
        Dense(layersizes[128], activation="relu"),
        Dense(layersizes[127], activation="relu"),
        Dense(layersizes[126], activation="relu"),
        Dense(layersizes[125], activation="relu"),
        Dense(layersizes[124], activation="relu"),
        Dense(layersizes[123], activation="relu"),
        Dense(layersizes[122], activation="relu"),
        Dense(layersizes[121], activation="relu"),
        Dense(layersizes[120], activation="relu"),
        Dense(layersizes[119], activation="relu"),
        Dense(layersizes[118], activation="relu"),
        Dense(layersizes[117], activation="relu"),
        Dense(layersizes[116], activation="relu"),
        Dense(layersizes[115], activation="relu"),
        Dense(layersizes[114], activation="relu"),
        Dense(layersizes[113], activation="relu"),
        Dense(layersizes[112], activation="relu"),
        Dense(layersizes[111], activation="relu"),
        Dense(layersizes[110], activation="relu"),
        Dense(layersizes[109], activation="relu"),
        Dense(layersizes[108], activation="relu"),
        Dense(layersizes[107], activation="relu"),
        Dense(layersizes[106], activation="relu"),
        Dense(layersizes[105], activation="relu"),
        Dense(layersizes[104], activation="relu"),
        Dense(layersizes[103], activation="relu"),
        Dense(layersizes[102], activation="relu"),
        Dense(layersizes[101], activation="relu"),
        Dense(layersizes[100], activation="relu"),
        Dense(layersizes[99], activation="relu"),
        Dense(layersizes[98], activation="relu"),
        Dense(layersizes[97], activation="relu"),
        Dense(layersizes[96], activation="relu"),
        Dense(layersizes[95], activation="relu"),
        Dense(layersizes[94], activation="relu"),
        Dense(layersizes[93], activation="relu"),
        Dense(layersizes[92], activation="relu"),
        Dense(layersizes[91], activation="relu"),
        Dense(layersizes[90], activation="relu"),
        Dense(layersizes[89], activation="relu"),
        Dense(layersizes[88], activation="relu"),
        Dense(layersizes[87], activation="relu"),
        Dense(layersizes[86], activation="relu"),
        Dense(layersizes[85], activation="relu"),
        Dense(layersizes[84], activation="relu"),
        Dense(layersizes[83], activation="relu"),
        Dense(layersizes[82], activation="relu"),
        Dense(layersizes[81], activation="relu"),
        Dense(layersizes[80], activation="relu"),
        Dense(layersizes[79], activation="relu"),
        Dense(layersizes[78], activation="relu"),
        Dense(layersizes[77], activation="relu"),
        Dense(layersizes[76], activation="relu"),
        Dense(layersizes[75], activation="relu"),
        Dense(layersizes[74], activation="relu"),
        Dense(layersizes[73], activation="relu"),
        Dense(layersizes[72], activation="relu"),
        Dense(layersizes[71], activation="relu"),
        Dense(layersizes[70], activation="relu"),
        Dense(layersizes[69], activation="relu"),
        Dense(layersizes[68], activation="relu"),
        Dense(layersizes[67], activation="relu"),
        Dense(layersizes[66], activation="relu"),
        Dense(layersizes[65], activation="relu"),
        Dense(layersizes[64], activation="relu"),
        Dense(layersizes[63], activation="relu"),
        Dense(layersizes[62], activation="relu"),
        Dense(layersizes[61], activation="relu"),
        Dense(layersizes[60], activation="relu"),
        Dense(layersizes[59], activation="relu"),
        Dense(layersizes[58], activation="relu"),
        Dense(layersizes[57], activation="relu"),
        Dense(layersizes[56], activation="relu"),
        Dense(layersizes[55], activation="relu"),
        Dense(layersizes[54], activation="relu"),
        Dense(layersizes[53], activation="relu"),
        Dense(layersizes[52], activation="relu"),
        Dense(layersizes[51], activation="relu"),
        Dense(layersizes[50], activation="relu"),
        Dense(layersizes[49], activation="relu"),
        Dense(layersizes[48], activation="relu"),
        Dense(layersizes[47], activation="relu"),
        Dense(layersizes[46], activation="relu"),
        Dense(layersizes[45], activation="relu"),
        Dense(layersizes[44], activation="relu"),
        Dense(layersizes[43], activation="relu"),
        Dense(layersizes[42], activation="relu"),
        Dense(layersizes[41], activation="relu"),
        Dense(layersizes[40], activation="relu"),
        Dense(layersizes[39], activation="relu"),
        Dense(layersizes[38], activation="relu"),
        Dense(layersizes[37], activation="relu"),
        Dense(layersizes[36], activation="relu"),
        Dense(layersizes[35], activation="relu"),
        Dense(layersizes[34], activation="relu"),
        Dense(layersizes[33], activation="relu"),
        Dense(layersizes[32], activation="relu"),
        Dense(layersizes[31], activation="relu"),
        Dense(layersizes[30], activation="relu"),
        Dense(layersizes[29], activation="relu"),
        Dense(layersizes[28], activation="relu"),
        Dense(layersizes[27], activation="relu"),
        Dense(layersizes[26], activation="relu"),
        Dense(layersizes[25], activation="relu"),
        Dense(layersizes[24], activation="relu"),
        Dense(layersizes[23], activation="relu"),
        Dense(layersizes[22], activation="relu"),
        Dense(layersizes[21], activation="relu"),
        Dense(layersizes[20], activation="relu"),
        Dense(layersizes[19], activation="relu"),
        Dense(layersizes[18], activation="relu"),
        Dense(layersizes[17], activation="relu"),
        Dense(layersizes[16], activation="relu"),
        Dense(layersizes[15], activation="relu"),
        Dense(layersizes[14], activation="relu"),
        Dense(layersizes[13], activation="relu"),
        Dense(layersizes[12], activation="relu"),
        Dense(layersizes[11], activation="relu"),
        Dense(layersizes[10], activation="relu"),
        Dense(layersizes[9], activation="relu"),
        Dense(layersizes[8], activation="relu"),
        Dense(layersizes[7], activation="relu"),
        Dense(layersizes[6], activation="relu"),
        Dense(layersizes[5], activation="relu"),
        Dense(layersizes[4], activation="relu"),
        Dense(layersizes[3], activation="relu"),
        Dense(layersizes[2], activation="relu"),
        Dense(layersizes[1], activation="relu"),
        Dense(140, activation="sigmoid")],
        name= "decoder_{}".format(iteration_number))

  def call(self, x):
    encoded = self.encoder(x)
    decoded = self.decoder(encoded)
    return decoded
  
